{
  "version": 4,
  "terraform_version": "1.13.4",
  "serial": 174,
  "lineage": "4e5d477b-7b8a-3c4a-4176-48d81a583db1",
  "outputs": {
    "argocd_url": {
      "value": "http://localhost:8081",
      "type": "string"
    },
    "consumer_logs_cmd": {
      "value": "kubectl logs -l app=consumer -n default",
      "type": "string"
    },
    "dashboard_token_instructions": {
      "value": "Run 'terraform apply' and check the null_resource output to get the dashboard token. Use this token to log in to the Kubernetes Dashboard UI.",
      "type": "string"
    },
    "jenkins_url": {
      "value": "http://localhost:8080",
      "type": "string"
    },
    "kafka_service": {
      "value": "Kafka running in namespace kafka",
      "type": "string"
    },
    "producer_url": {
      "value": "http://localhost:30010/api/prod/event",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v3.1.9",
                "chart": "argo-cd",
                "first_deployed": 1761052718,
                "last_deployed": 1761052718,
                "name": "argocd",
                "namespace": "argocd",
                "notes": "\nIn order to access the server UI you have the following options:\n\n1. kubectl port-forward service/argocd-server -n argocd 8080:443\n\n    and then open the browser on http://localhost:8080 and accept the certificate\n\n2. enable ingress in the values file `server.ingress.enabled` and either\n      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough\n      - Set the `configs.params.\"server.insecure\"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts\n\n\nAfter reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)\n",
                "revision": 1,
                "values": "{\"configs\":{\"cm\":{\"application.instanceLabelKey\":\"app.kubernetes.io/instance\"}},\"controller\":{\"resources\":{\"limits\":{\"cpu\":\"200m\",\"memory\":\"256Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}}},\"dex\":{\"enabled\":false},\"repoServer\":{\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"50m\",\"memory\":\"64Mi\"}}},\"server\":{\"ingress\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"nginx\"},\"enabled\":true,\"hosts\":[\"argocd.local\"],\"tls\":[]},\"service\":{\"nodePort\":30081,\"type\":\"NodePort\"}}}",
                "version": "9.0.3"
              }
            ],
            "name": "argocd",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "# argocd-values.yaml\r\n\r\nserver:\r\n  service:\r\n    type: NodePort\r\n    nodePort: 30081   # Access ArgoCD UI at localhost:30081\r\n  ingress:\r\n    enabled: true\r\n    annotations:\r\n      kubernetes.io/ingress.class: nginx\r\n    hosts:\r\n      - argocd.local\r\n    tls: []\r\n\r\ncontroller:\r\n  resources:\r\n    requests:\r\n      cpu: 100m\r\n      memory: 128Mi\r\n    limits:\r\n      cpu: 200m\r\n      memory: 256Mi\r\n\r\nrepoServer:\r\n  resources:\r\n    requests:\r\n      cpu: 50m\r\n      memory: 64Mi\r\n    limits:\r\n      cpu: 100m\r\n      memory: 128Mi\r\n\r\ndex:\r\n  enabled: false   # Disable dex for local dev\r\n\r\nconfigs:\r\n  cm:\r\n    # Allow ArgoCD to auto-sync apps from Git\r\n    application.instanceLabelKey: app.kubernetes.io/instance\r\n"
            ],
            "verify": false,
            "version": "9.0.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "consumer",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "../charts/consumer",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "consumer",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.0.0",
                "chart": "consumer",
                "first_deployed": 1761052845,
                "last_deployed": 1761052845,
                "name": "consumer",
                "namespace": "default",
                "notes": "",
                "revision": 1,
                "values": "{\"autoscaling\":{\"cpuUtilizationPercent\":60,\"enabled\":true,\"kafkaLag\":{\"enabled\":false},\"maxReplicas\":3,\"minReplicas\":1},\"image\":{\"repository\":\"REPLACE_ME_REGISTRY/consumer\",\"tag\":\"dev-latest\"},\"replicaCount\":1}",
                "version": "0.1.0"
              }
            ],
            "name": "consumer",
            "namespace": "default",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "replicaCount: 1\r\nimage:\r\n  repository: REPLACE_ME_REGISTRY/consumer\r\n  tag: dev-latest\r\nautoscaling:\r\n  enabled: true\r\n  minReplicas: 1\r\n  maxReplicas: 3\r\n  cpuUtilizationPercent: 60\r\n  kafkaLag:\r\n    enabled: false\r\n"
            ],
            "verify": false,
            "version": "0.1.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.kafka",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "jenkins",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "status": "tainted",
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "jenkins",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "jenkins",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2.528.1",
                "chart": "jenkins",
                "first_deployed": 1761052722,
                "last_deployed": 1761052722,
                "name": "jenkins",
                "namespace": "jenkins",
                "notes": "1. Get your 'admin' user password by running:\n  kubectl exec --namespace jenkins -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/additional/chart-admin-password \u0026\u0026 echo\n2. Get the Jenkins URL to visit by running these commands in the same shell:\n  export NODE_PORT=$(kubectl get --namespace jenkins -o jsonpath=\"{.spec.ports[0].nodePort}\" services jenkins)\n  export NODE_IP=$(kubectl get nodes --namespace jenkins -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n\n3. Login with the password from step 1 and the username: admin\n4. Configure security realm and authorization strategy\n5. Use Jenkins Configuration as Code by specifying configScripts in your values.yaml file, see documentation: http://$NODE_IP:$NODE_PORT/configuration-as-code and examples: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos\n\nFor more information on running Jenkins on Kubernetes, visit:\nhttps://cloud.google.com/solutions/jenkins-on-container-engine\n\nFor more information about Jenkins Configuration as Code, visit:\nhttps://jenkins.io/projects/jcasc/\n\n\nNOTE: Consider using a custom image with pre-installed plugins\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Jenkins pod is terminated.                            #####\n#################################################################################\n",
                "revision": 1,
                "values": "{\"controller\":{\"nodePort\":30000,\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"512Mi\"}},\"serviceType\":\"NodePort\"},\"persistence\":{\"enabled\":false}}",
                "version": "5.8.104"
              }
            ],
            "name": "jenkins",
            "namespace": "jenkins",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.jenkins.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "failed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "# Minimal jenkins-values.yaml for local dev\r\ncontroller:\r\n  serviceType: NodePort\r\n  # Use a different NodePort to avoid collisions (30081 used by ArgoCD in this repo)\r\n  nodePort: 30000\r\n  # Increase resource requests/limits to avoid OOM during plugin installation\r\n  resources:\r\n    requests:\r\n      cpu: 500m\r\n      memory: 512Mi\r\n    limits:\r\n      cpu: 1000m\r\n      memory: 1Gi\r\n\r\npersistence:\r\n  enabled: false\r\n"
            ],
            "verify": false,
            "version": "5.8.104",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kafka",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "../charts/kafka/",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": true,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "kafka",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "",
                "chart": "kafka",
                "first_deployed": 1761052710,
                "last_deployed": 1761052710,
                "name": "kafka",
                "namespace": "kafka",
                "notes": "CHART NAME: kafka\nCHART VERSION: 32.4.3\nAPP VERSION: 4.0.0\n\n⚠ WARNING: Since August 28th, 2025, only a limited subset of images/charts are available for free.\n    Subscribe to Bitnami Secure Images to receive continued support and security updates.\n    More info at https://bitnami.com and https://github.com/bitnami/containers/issues/83267\n\n** Please be patient while the chart is being deployed **\n\nKafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:\n\n    kafka.kafka.svc.cluster.local\n\nEach Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:\n\n    kafka-controller-0.kafka-controller-headless.kafka.svc.cluster.local:9092\n    kafka-broker-0.kafka-broker-headless.kafka.svc.cluster.local:9092\n\nThe CLIENT listener for Kafka client connections from within your cluster have been configured with the following security settings:\n    - SASL authentication\n\nTo connect a client to your Kafka, you need to create the 'client.properties' configuration files with the content below:\n\nsecurity.protocol=SASL_PLAINTEXT\nsasl.mechanism=SCRAM-SHA-256\nsasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \\\n    username=\"user1\" \\\n    password=\"$(kubectl get secret kafka-user-passwords --namespace kafka -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)\";\n\nTo create a pod that you can use as a Kafka client run the following commands:\n\n    kubectl run kafka-client --restart='Never' --image docker.io/bitnamilegacy/kafka:4.0.0-debian-12-r10 --namespace kafka --command -- sleep infinity\n    kubectl cp --namespace kafka /path/to/client.properties kafka-client:/tmp/client.properties\n    kubectl exec --tty -i kafka-client --namespace kafka -- bash\n\n    PRODUCER:\n        kafka-console-producer.sh \\\n            --producer.config /tmp/client.properties \\\n            --bootstrap-server kafka.kafka.svc.cluster.local:9092 \\\n            --topic test\n\n    CONSUMER:\n        kafka-console-consumer.sh \\\n            --consumer.config /tmp/client.properties \\\n            --bootstrap-server kafka.kafka.svc.cluster.local:9092 \\\n            --topic test \\\n            --from-beginning\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - broker.resources\n  - controller.resources\n  - defaultInitContainers.prepareConfig.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n⚠ SECURITY WARNING: Original containers have been substituted. This Helm chart was designed, tested, and validated on multiple platforms using a specific set of Bitnami and Tanzu Application Catalog containers. Substituting other containers is likely to cause degraded security and performance, broken chart features, and missing environment variables.\n\nSubstituted images detected:\n  - docker.io/bitnamilegacy/kafka:4.0.0-debian-12-r10\n\n⚠ SECURITY WARNING: Verifying original container images was skipped. Please note this Helm chart was designed, tested, and validated on multiple platforms using a specific set of Bitnami and Bitnami Secure Images containers. Substituting other containers is likely to cause degraded security and performance, broken chart features, and missing environment variables.\n\n",
                "revision": 1,
                "values": "{\"global\":{\"security\":{\"allowInsecureImages\":true}},\"kafka\":{\"broker\":{\"replicaCount\":1},\"controller\":{\"replicaCount\":1},\"image\":{\"registry\":\"docker.io\",\"repository\":\"bitnamilegacy/kafka\",\"tag\":\"4.0.0-debian-12-r10\"},\"initContainers\":[{\"command\":[\"/bin/bash\",\"-c\",\"echo 'Initializing Kafka broker and controller...'\"],\"image\":\"docker.io/bitnamilegacy/kafka:4.0.0-debian-12-r10\",\"name\":\"custom-kafka-init\"}],\"kraft\":{\"enabled\":true},\"persistence\":{\"enabled\":false}}}",
                "version": "0.1.0"
              }
            ],
            "name": "kafka",
            "namespace": "kafka",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": null,
            "values": [
              "kafka:\r\n  kraft:\r\n    enabled: true\r\n  controller:\r\n    replicaCount: 1\r\n  broker:\r\n    replicaCount: 1\r\n  persistence:\r\n    enabled: false\r\n\r\n  # Override the default Bitnami image with the legacy image\r\n  image:\r\n    registry: docker.io\r\n    repository: bitnamilegacy/kafka\r\n    tag: 4.0.0-debian-12-r10\r\n\r\n  # Init container using bash from the legacy image\r\n  initContainers:\r\n    - name: custom-kafka-init\r\n      image: docker.io/bitnamilegacy/kafka:4.0.0-debian-12-r10\r\n      command: [\"/bin/bash\", \"-c\", \"echo 'Initializing Kafka broker and controller...'\"]\r\n      # optional volume mounts if you have init scripts\r\n      # volumeMounts:\r\n      #   - name: scripts\r\n      #     mountPath: /scripts\r\n      #     subPath: kafka-init.sh\r\n      #     readOnly: true\r\n\r\nglobal:\r\n  security:\r\n    allowInsecureImages: true\r\n"
            ],
            "verify": false,
            "version": "0.1.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kubernetes_dashboard",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kubernetes-dashboard",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kubernetes-dashboard",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2.3.1",
                "chart": "kubernetes-dashboard",
                "first_deployed": 1761052713,
                "last_deployed": 1761052713,
                "name": "kubernetes-dashboard",
                "namespace": "kubernetes-dashboard",
                "notes": "*********************************************************************************\n*** PLEASE BE PATIENT: kubernetes-dashboard may take a few minutes to install ***\n*********************************************************************************\n\nGet the Kubernetes Dashboard URL by running:\n  export NODE_PORT=$(kubectl get -n kubernetes-dashboard -o jsonpath=\"{.spec.ports[0].nodePort}\" services kubernetes-dashboard)\n  export NODE_IP=$(kubectl get nodes -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo https://$NODE_IP:$NODE_PORT/\n",
                "revision": 1,
                "values": "{\"rbac\":{\"clusterAdminRole\":true},\"service\":{\"nodePort\":30090,\"type\":\"NodePort\"}}",
                "version": "5.0.0"
              }
            ],
            "name": "kubernetes-dashboard",
            "namespace": "kubernetes-dashboard",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes.github.io/dashboard/",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "\"rbac\":\n  \"clusterAdminRole\": true\n\"service\":\n  \"nodePort\": 30090\n  \"type\": \"NodePort\"\n"
            ],
            "verify": false,
            "version": "5.0.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "null_resource.helm_repo_update",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "monitoring",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "../charts/monitoring",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": true,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "monitoring",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "",
                "chart": "monitoring",
                "first_deployed": 1761052711,
                "last_deployed": 1761052711,
                "name": "monitoring",
                "namespace": "monitoring",
                "notes": "1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=monitoring\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace monitoring $POD_NAME 9100\n\nkube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, monitoring-kube-state-metrics.monitoring.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n\n\nkube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace monitoring get pods -l \"release=monitoring\"\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n\nmonitoring-prometheus-adapter has been deployed.\nIn a few minutes you should be able to list metrics using the following command(s):\n\n  kubectl get --raw /apis/custom.metrics.k8s.io/v1beta1\n\n\n1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace monitoring monitoring-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   monitoring-grafana.monitoring.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export NODE_PORT=$(kubectl get --namespace monitoring -o jsonpath=\"{.spec.ports[0].nodePort}\" services monitoring-grafana)\n     export NODE_IP=$(kubectl get nodes --namespace monitoring -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n     echo http://$NODE_IP:$NODE_PORT\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n",
                "revision": 1,
                "values": "{\"kube-prometheus-stack\":{\"grafana\":{\"adminPassword\":\"admin\",\"service\":{\"type\":\"NodePort\"}},\"installCRDs\":true,\"podSecurityPolicy\":{\"enabled\":false}},\"prometheus-adapter\":{\"enabled\":true,\"podSecurityPolicy\":{\"enabled\":false}}}",
                "version": "0.1.0"
              }
            ],
            "name": "monitoring",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "kube-prometheus-stack:\r\n  installCRDs: true        # install CRDs\r\n  grafana:\r\n    adminPassword: \"admin\"\r\n    service:\r\n      type: NodePort\r\n  podSecurityPolicy:\r\n    enabled: false          # disable PSP entirely\r\n\r\nprometheus-adapter:\r\n  enabled: true\r\n  podSecurityPolicy:\r\n    enabled: false          # disable PSP\r\n\r\n# prometheus-kafka-exporter:\r\n#   enabled: true\r\n#   podSecurityPolicy:\r\n#     enabled: false      # disable PSP for Kubernetes \u003e=1.25\r\n#   kafkaServers:\r\n#     - \"my-kafka-broker:9092\"\r\n#   prometheus:\r\n#     serviceMonitor:\r\n#       enabled: true\r\n#       additionalLabels:\r\n#         release: \"monitoring\"\r\n\r\n"
            ],
            "verify": false,
            "version": "0.1.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "null_resource.helm_repo_update",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "producer",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "../charts/producer",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "producer",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.0.0",
                "chart": "producer",
                "first_deployed": 1761052845,
                "last_deployed": 1761052845,
                "name": "producer",
                "namespace": "default",
                "notes": "",
                "revision": 1,
                "values": "{\"hpa\":{\"cpuUtilization\":50,\"enabled\":true,\"maxReplicas\":3,\"minReplicas\":1},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"producer\",\"tag\":\"dev-latest\"},\"replicaCount\":1,\"service\":{\"nodePort\":30010,\"type\":\"NodePort\"},\"serviceMonitor\":{\"enabled\":true,\"interval\":\"15s\",\"namespace\":\"monitoring\"}}",
                "version": "0.1.0"
              }
            ],
            "name": "producer",
            "namespace": "default",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "replicaCount: 1\r\nimage:\r\n  repository: producer\r\n  tag: dev-latest\r\n  pullPolicy: IfNotPresent\r\nservice:\r\n  type: NodePort\r\n  nodePort: 30010\r\nserviceMonitor:\r\n  enabled: true\r\n  namespace: monitoring\r\n  interval: 15s\r\nhpa:\r\n  enabled: true\r\n  minReplicas: 1\r\n  maxReplicas: 3\r\n  cpuUtilization: 50\r\n"
            ],
            "verify": false,
            "version": "0.1.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "identity_schema_version": 0,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.kafka",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_cluster_role_binding",
      "name": "dashboard_admin",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "dashboard-admin-binding",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "dashboard-admin-binding",
                "resource_version": "759",
                "uid": "8d9aa9ed-bc20-4713-a73a-bbd36b218a10"
              }
            ],
            "role_ref": [
              {
                "api_group": "rbac.authorization.k8s.io",
                "kind": "ClusterRole",
                "name": "cluster-admin"
              }
            ],
            "subject": [
              {
                "api_group": "",
                "kind": "ServiceAccount",
                "name": "dashboard-admin",
                "namespace": "kubernetes-dashboard"
              }
            ]
          },
          "sensitive_attributes": [],
          "identity_schema_version": 1,
          "identity": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "kind": "ClusterRoleBinding",
            "name": "dashboard-admin-binding"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "helm_release.kubernetes_dashboard",
            "kubernetes_service_account.dashboard_admin",
            "null_resource.helm_repo_update",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service_account",
      "name": "dashboard_admin",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "automount_service_account_token": true,
            "default_secret_name": "",
            "id": "kubernetes-dashboard/dashboard-admin",
            "image_pull_secret": [],
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "dashboard-admin",
                "namespace": "kubernetes-dashboard",
                "resource_version": "757",
                "uid": "306aed2a-e564-44e7-b83f-79b489c0bae5"
              }
            ],
            "secret": [],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 1,
          "identity": {
            "api_version": "v1",
            "kind": "ServiceAccount",
            "name": "dashboard-admin",
            "namespace": "kubernetes-dashboard"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMH19",
          "dependencies": [
            "helm_release.kubernetes_dashboard",
            "null_resource.helm_repo_update",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "dashboard_token",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "7088817892547085422",
            "triggers": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0,
          "dependencies": [
            "helm_release.kubernetes_dashboard",
            "kubernetes_cluster_role_binding.dashboard_admin",
            "kubernetes_service_account.dashboard_admin",
            "null_resource.helm_repo_update",
            "null_resource.kind_cluster",
            "null_resource.wait_for_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "helm_repo_update",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "4059411982448821317",
            "triggers": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "kind_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "7298710901563483053",
            "triggers": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "wait_for_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "4091264016540111642",
            "triggers": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0,
          "dependencies": [
            "null_resource.kind_cluster"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
